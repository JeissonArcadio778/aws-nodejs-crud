service: nodejs-aws-order-salchipapas
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 
            - sqs:*
          Resource:
            - 'arn:aws:sqs:us-east-1:788950990295:PendingOrderQueue'
        - Effect: Allow
          Action: 
            - dynamodb:*
          Resource: 
            - 'arn:aws:dynamodb:us-east-1:788950990295:table/CompletedOrdersTable'

functions:
  createOrder:
    handler: controllers/create-order.createOrder
    events: 
      - httpApi:
          path: /order 
          method: post
  prepareOrder:
    handler: controllers/prepare-order.prepareOrder
    events:
      - sqs: 
          arn: 
            Fn::GetAtt:
                - PendingOrderQueue
                - Arn
          batchSize: 1 # Quantity of SQS Messages to trigger the lambda
  sendOrder:
    handler: controllers/send-order.sendOrder
    events:
      - stream:
          type: dynamodb
          batchSize: 1 # Quantity of SQS Messages to trigger the lambda
          startingPosition: LATEST
          arn:
            Fn::GetAtt: [CompletedOrdersTable, StreamArn]
  statusOrder:
    handler: controllers/status-order.statusOrder
    events: 
      - httpApi:
          path: /order/{id} 
          method: get
    

resources: 
  Resources: 
    PendingOrderQueue:
      Type: "AWS::SQS::Queue"
      Properties: 
        QueueName: "PendingOrderQueue" 
        # Maybe we can more environments ..OrderQueueDEV, PROD
    CompletedOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CompletedOrdersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

